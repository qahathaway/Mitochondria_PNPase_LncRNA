library(tidyverse)
library(reshape2)
library(xgboost)
library(randomForest)
library(rfUtilities)


RWH = read.csv('path_to_your_files.csv', row.names = 1)
head(RWH)
summary(RWH)


###Classification Trees###
# Classification CV
RWH$label <- as.factor(RWH$label)    	
set.seed(100)	
( rf.mdl <- randomForest(RWH[,2:106], RWH[,"label"], ntree=5000) )
( rf.cv <- rf.crossValidation(rf.mdl, RWH[,2:106], p=0.10, n=10, ntree=5000) )

# Plot cross validation verses model producers accuracy
par(mfrow=c(2,2)) 
plot(rf.cv, type = "cv", main = "CV producers accuracy")
plot(rf.cv, type = "model", main = "Model producers accuracy")

# Plot cross validation verses model oob
plot(rf.cv, type = "cv", stat = "oob", main = "CV oob error")
plot(rf.cv, type = "model", stat = "oob", main = "Model oob error")


# Classification Single
set.seed(110)
ind = sample(2, nrow(RWH), replace=TRUE, prob=c(0.7,0.3))
trainData = RWH[ind==1,]
testData = RWH[ind==2,]

RWH_rf = randomForest(label~., data=trainData, ntree=5000, proximity=TRUE)
table(predict(RWH_rf), trainData$label)
RWH_rf
par(mfrow=c(1,1))
plot(RWH_rf)
importance(RWH_rf)

RWHPred = predict(RWH_rf, newdata=testData)
table(RWHPred, testData$label)

plot(margin(RWH_rf, testData$label))
CM = table(RWHPred, testData$label)

accuracy = (sum(diag(CM)))/sum(CM)
accuracy

library(ROCR)
predictions=as.vector(RWH_rf$votes[,2])
pred=prediction(predictions,trainData$label)

perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]

perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))



###Unsupervised###
n=4
clust.iris <- rf.unsupervised(RWH[,2:106], n=n, proximity = TRUE, 
                              silhouettes = TRUE)
rf.unsuper <- as.data.frame(clust.iris$k)

mds <- stats:::cmdscale(clust.iris$distances, eig=TRUE, k=n)
colnames(mds$points) <- paste("Dim", 1:n)
mds.col <- ifelse(clust.iris$k == 1, rainbow(4)[1],
                  ifelse(clust.iris$k == 2, rainbow(4)[2],
                         ifelse(clust.iris$k == 3, rainbow(4)[3],
                                ifelse(clust.iris$k == 4, rainbow(4)[4], NA))))

par(mfrow=c(1,1))
plot(mds$points[,1:2],col=mds.col, pch=20, cex = 2.5)
legend("bottomright",levels(RWH$Cluster),col=brewer.pal(n = 5, name = "Set1"), pch=as.numeric(RWH$Cluster))

pairs(mds$points, col=mds.col, pch=20)

write.csv(rf.unsuper, file = "path_to_your_file.csv")
